-- MySQL Script generated by MySQL Workbench
-- Wed Jun 12 17:53:35 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Taskify
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Taskify
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Taskify` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_polish_ci ;
USE `Taskify` ;

-- -----------------------------------------------------
-- Table `Taskify`.`Uzytkownik`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Taskify`.`Uzytkownik` (
  `uzytkownik_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NOT NULL,
  `haslo` VARCHAR(255) NOT NULL,
  `imie` VARCHAR(45) NOT NULL,
  `nazwisko` VARCHAR(45) NOT NULL,
  `data_urodzenia` DATE NOT NULL,
  `plec` ENUM('1', '2') NOT NULL,
  `token` VARCHAR(255) NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 0,
  `refreshToken` VARCHAR(255) NULL,
  `passToken` VARCHAR(255) NULL,
  PRIMARY KEY (`uzytkownik_id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `Taskify`.`Projekty`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Taskify`.`Projekty` (
  `projekt_id` INT NOT NULL AUTO_INCREMENT,
  `tytul` VARCHAR(100) NOT NULL,
  `data_utworzenia` DATETIME NOT NULL DEFAULT NOW(),
  PRIMARY KEY (`projekt_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Taskify`.`Kalendarz`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Taskify`.`Kalendarz` (
  `kalendarz_id` INT NOT NULL AUTO_INCREMENT,
  `tytul` VARCHAR(100) NOT NULL,
  `opis` VARCHAR(255) NULL,
  `data_utworzenia` DATETIME NOT NULL,
  `data_zakonczenia` DATETIME NOT NULL,
  `uzytkownik_id` INT NOT NULL,
  `projekt_id` INT NOT NULL,
  PRIMARY KEY (`kalendarz_id`),
  INDEX `uzytkownik_id_idx` (`uzytkownik_id` ASC) VISIBLE,
  INDEX `projekt_id_idx` (`projekt_id` ASC) VISIBLE,
  CONSTRAINT `uzytkownik_id_kalendarz`
    FOREIGN KEY (`uzytkownik_id`)
    REFERENCES `Taskify`.`Uzytkownik` (`uzytkownik_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `projekt_id_kalendarz`
    FOREIGN KEY (`projekt_id`)
    REFERENCES `Taskify`.`Projekty` (`projekt_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Taskify`.`Zadania`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Taskify`.`Zadania` (
  `zadanie_id` INT NOT NULL AUTO_INCREMENT,
  `tytul` VARCHAR(100) NOT NULL,
  `opis` VARCHAR(500) NULL,
  `status` ENUM('Do zrobienia', 'Trwajace', 'Zrobione') NOT NULL,
  `priorytet` ENUM('Niski', 'Sredni', 'Wysoki') NOT NULL,
  `do_kiedy` DATETIME NOT NULL,
  `data_utworzenia` DATETIME NOT NULL,
  `rozpoczecie_pracy` DATETIME NULL,
  `zakonczenie_pracy` DATETIME NULL,
  `szacowany_czas` TIME NOT NULL,
  `projekt_id` INT NOT NULL,
  `uzytkownik_id` INT NULL DEFAULT NULL,
  PRIMARY KEY (`zadanie_id`),
  INDEX `projekt_id_idx` (`projekt_id` ASC) VISIBLE,
  INDEX `fk_Zadania_Uzytkownik1_idx` (`uzytkownik_id` ASC) VISIBLE,
  CONSTRAINT `projekt_id_projekty`
    FOREIGN KEY (`projekt_id`)
    REFERENCES `Taskify`.`Projekty` (`projekt_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Zadania_Uzytkownik1`
    FOREIGN KEY (`uzytkownik_id`)
    REFERENCES `Taskify`.`Uzytkownik` (`uzytkownik_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Taskify`.`Komentarze`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Taskify`.`Komentarze` (
  `komentarz_id` INT NOT NULL AUTO_INCREMENT,
  `komentarz` VARCHAR(255) NOT NULL,
  `data` DATETIME NOT NULL,
  `zadanie_id` INT NOT NULL,
  `uzytkownik_id` INT NOT NULL,
  PRIMARY KEY (`komentarz_id`),
  INDEX `zadanie_id_idx` (`zadanie_id` ASC) VISIBLE,
  INDEX `uzytkownik_id_idx` (`uzytkownik_id` ASC) VISIBLE,
  CONSTRAINT `zadanie_id_komentarze`
    FOREIGN KEY (`zadanie_id`)
    REFERENCES `Taskify`.`Zadania` (`zadanie_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `uzytkownik_id_komentarze`
    FOREIGN KEY (`uzytkownik_id`)
    REFERENCES `Taskify`.`Uzytkownik` (`uzytkownik_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Taskify`.`Zalaczniki`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Taskify`.`Zalaczniki` (
  `zalacznik_id` INT NOT NULL AUTO_INCREMENT,
  `nazwa_pliku` VARCHAR(255) NOT NULL,
  `sciezka_pliku` VARCHAR(255) NOT NULL,
  `zadanie_id` INT NOT NULL,
  PRIMARY KEY (`zalacznik_id`),
  INDEX `zadanie_id_idx` (`zadanie_id` ASC) VISIBLE,
  CONSTRAINT `zadanie_id_zalaczniki`
    FOREIGN KEY (`zadanie_id`)
    REFERENCES `Taskify`.`Zadania` (`zadanie_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Taskify`.`Projekty_Uzytkownik`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Taskify`.`Projekty_Uzytkownik` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `projekt_id` INT NOT NULL,
  `uzytkownik_id` INT NOT NULL,
  `manager` TINYINT(1) NOT NULL DEFAULT 0,
  INDEX `fk_Projekty_has_Uzytkownik_Uzytkownik1_idx` (`uzytkownik_id` ASC) VISIBLE,
  INDEX `fk_Projekty_has_Uzytkownik_Projekty1_idx` (`projekt_id` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_Projekty_has_Uzytkownik_Projekty1`
    FOREIGN KEY (`projekt_id`)
    REFERENCES `Taskify`.`Projekty` (`projekt_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Projekty_has_Uzytkownik_Uzytkownik1`
    FOREIGN KEY (`uzytkownik_id`)
    REFERENCES `Taskify`.`Uzytkownik` (`uzytkownik_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Taskify`.`Logi`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Taskify`.`Logi` (
  `log_id` INT NOT NULL AUTO_INCREMENT,
  `status` VARCHAR(45) NOT NULL,
  `czas_rozpoczecia` DATETIME NULL,
  `czas_zakonczenia` DATETIME NULL,
  `zadanie_id` INT NOT NULL,
  `uzytkownik_id` INT NULL,
  PRIMARY KEY (`log_id`),
  INDEX `fk_Logi_Zadania1_idx` (`zadanie_id` ASC) VISIBLE,
  INDEX `fk_Logi_Uzytkownik1_idx` (`uzytkownik_id` ASC) VISIBLE,
  CONSTRAINT `fk_Logi_Zadania1`
    FOREIGN KEY (`zadanie_id`)
    REFERENCES `Taskify`.`Zadania` (`zadanie_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Logi_Uzytkownik1`
    FOREIGN KEY (`uzytkownik_id`)
    REFERENCES `Taskify`.`Uzytkownik` (`uzytkownik_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `Taskify` ;

-- -----------------------------------------------------
-- function IsUser
-- -----------------------------------------------------

DELIMITER $$
USE `Taskify`$$
CREATE FUNCTION IsUser(user_email VARCHAR(255))
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE ilosc INT;
    DECLARE istnieje BOOLEAN;

    SELECT COUNT(*) INTO ilosc
    FROM uzytkownik
    WHERE email = user_email AND active = 1;

    IF ilosc > 0 THEN
        SET istnieje = TRUE;
    ELSE
        SET istnieje = FALSE;
    END IF;

    RETURN istnieje;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure czas
-- -----------------------------------------------------

DELIMITER $$
USE `Taskify`$$
CREATE PROCEDURE `czas` (IN zadanie_id INT)
BEGIN
    SELECT
        u.imie,
        u.nazwisko,
        p.zadanie_id,
        FLOOR(SUM(p.czas_trwania) / 3600) AS godziny,
        FLOOR((SUM(p.czas_trwania) % 3600) / 60) AS minuty,
        SUM(p.czas_trwania) % 60 AS sekundy,
        SUM(p.czas_trwania) AS suma,
        TIME_TO_SEC(z.szacowany_czas) AS szacowany_czas
    FROM (
        SELECT
            logi.uzytkownik_id,
            logi.zadanie_id,
            TIMESTAMPDIFF(SECOND, logi.czas_rozpoczecia, LEAD(logi.czas_zakonczenia) OVER (
                PARTITION BY logi.uzytkownik_id, logi.zadanie_id 
                ORDER BY logi.log_id
            )) AS czas_trwania
        FROM logi
        WHERE logi.zadanie_id = zadanie_id
    ) AS p
    JOIN uzytkownik u ON p.uzytkownik_id = u.uzytkownik_id
    JOIN zadania z ON p.zadanie_id = z.zadanie_id
    WHERE p.czas_trwania IS NOT NULL
    GROUP BY
        p.zadanie_id,
        u.imie,
        u.nazwisko,
        z.szacowany_czas;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure pozostaly_czas
-- -----------------------------------------------------

DELIMITER $$
USE `Taskify`$$
CREATE PROCEDURE `pozostaly_czas` (projekt_id INT)
BEGIN
    SELECT
        z.zadanie_id,
        z.tytul,
        z.szacowany_czas,
        SEC_TO_TIME(SUM(COALESCE(p.suma, 0))) AS suma_czasu_pracy,
        CASE
            WHEN TIMEDIFF(z.szacowany_czas, SEC_TO_TIME(SUM(COALESCE(p.suma, 0)))) < '00:00:00' THEN '00:00:00'
            ELSE TIMEDIFF(z.szacowany_czas, SEC_TO_TIME(SUM(COALESCE(p.suma, 0))))
        END AS pozostaly_czas
    FROM zadania z
    LEFT JOIN (
        SELECT
            pp.zadanie_id,
            SUM(pp.czas_trwania) AS suma
        FROM (
            SELECT
                logi.uzytkownik_id,
                logi.zadanie_id,
                TIMESTAMPDIFF(SECOND, logi.czas_rozpoczecia, LEAD(logi.czas_zakonczenia) OVER (
                    PARTITION BY logi.uzytkownik_id, logi.zadanie_id ORDER BY logi.log_id
                )) AS czas_trwania
            FROM logi
        ) AS pp
        WHERE pp.czas_trwania IS NOT NULL
        GROUP BY pp.zadanie_id
    ) AS p ON z.zadanie_id = p.zadanie_id
    WHERE z.projekt_id = projekt_id
    GROUP BY z.zadanie_id, z.tytul, z.szacowany_czas;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure raport
-- -----------------------------------------------------

DELIMITER $$
USE `Taskify`$$
CREATE PROCEDURE `raport` (IN projekt_id INT)
BEGIN
	SELECT
        SUM(logi_czas.czas_trwania) AS 'suma_czasu',
        COUNT(CASE WHEN z.status = 'Do zrobienia' THEN 1 END) AS 'do_zrobienia',
        COUNT(CASE WHEN z.status = 'Trwajace' THEN 1 END) AS 'trwajace',
        COUNT(CASE WHEN z.status = 'Zrobione' THEN 1 END) AS 'zrobione',
        SUM(TIME_TO_SEC(z.szacowany_czas)) AS 'suma_szac',
        (SELECT COUNT(*) FROM logi l WHERE l.zadanie_id IN (SELECT zadanie_id FROM zadania WHERE projekt_id = projekt_id)) AS 'suma_logow',
        p.data_utworzenia AS 'data_poczatku',
        TIMESTAMPDIFF(SECOND, p.data_utworzenia, NOW()) AS 'czas_od',
        DATEDIFF(NOW(), p.data_utworzenia) AS 'dni_od'
    FROM
        zadania z
        LEFT JOIN (
            SELECT
                l.zadanie_id,
                SUM(COALESCE(
                    TIMESTAMPDIFF(SECOND, l.czas_rozpoczecia, (
                        SELECT
                            l2.czas_zakonczenia
                        FROM
                            logi l2
                        WHERE
                            l2.uzytkownik_id = l.uzytkownik_id
                            AND l2.zadanie_id = l.zadanie_id
                            AND l2.log_id > l.log_id
                        ORDER BY
                            l2.log_id
                        LIMIT 1
                    )), 0
                )) AS czas_trwania
            FROM
                logi l
            GROUP BY
                l.zadanie_id
        ) AS logi_czas ON z.zadanie_id = logi_czas.zadanie_id
        JOIN projekty p ON z.projekt_id = p.projekt_id
    WHERE
        z.projekt_id = projekt_id
    GROUP BY
        p.projekt_id;
END$$

DELIMITER ;
USE `Taskify`;

DELIMITER $$
USE `Taskify`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Taskify`.`utworzenieZadania` AFTER INSERT ON `Zadania` FOR EACH ROW
BEGIN
	INSERT INTO logi (status, czas_rozpoczecia, zadanie_id, uzytkownik_id)
    VALUES ('Utworzono', NOW(), NEW.zadanie_id, NEW.uzytkownik_id);
END$$

USE `Taskify`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Taskify`.`zmianaStatusu` AFTER UPDATE ON `Zadania` FOR EACH ROW
BEGIN
	IF NEW.status != OLD.status THEN
        IF NEW.status = 'Do zrobienia' AND OLD.status = 'Trwajace' THEN
            INSERT INTO Logi (zadanie_id, status, czas_zakonczenia, uzytkownik_id)
            VALUES (NEW.zadanie_id, NEW.status, NOW(), NEW.uzytkownik_id);
		ELSEIF NEW.status = 'Trwajace' AND OLD.status = 'Zrobione' THEN
			INSERT INTO Logi (zadanie_id, status, czas_rozpoczecia, uzytkownik_id)
            VALUES (NEW.zadanie_id, NEW.status, NOW(), NEW.uzytkownik_id);
        ELSEIF NEW.status = 'Do zrobienia' AND OLD.status = 'Zrobione' THEN
			INSERT INTO Logi (zadanie_id, status, uzytkownik_id)
            VALUES (NEW.zadanie_id, NEW.status, NEW.uzytkownik_id);
        END IF;
    END IF;
END$$

USE `Taskify`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Taskify`.`startPracy` AFTER UPDATE ON `Zadania` FOR EACH ROW
BEGIN
	IF NEW.rozpoczecie_pracy IS NOT NULL AND OLD.rozpoczecie_pracy IS NULL THEN
        INSERT INTO Logi (zadanie_id, status, czas_rozpoczecia, uzytkownik_id)
        VALUES (NEW.zadanie_id, 'Trwajace', NEW.rozpoczecie_pracy, NEW.uzytkownik_id);
    END IF;
END$$

USE `Taskify`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Taskify`.`koniecPracy` AFTER UPDATE ON `Zadania` FOR EACH ROW
BEGIN
	IF NEW.zakonczenie_pracy IS NOT NULL AND OLD.zakonczenie_pracy IS NULL THEN
        INSERT INTO Logi (zadanie_id, status, czas_zakonczenia, uzytkownik_id)
        VALUES (NEW.zadanie_id, 'Zrobione', NEW.zakonczenie_pracy, NEW.uzytkownik_id);
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
